#![no_std] // Do not link the Rust stdlib
#![no_main] // Disable all Rust-level entry points
// Enable custom_test_frameworks
#![feature(custom_test_frameworks)] 
// Set the test_runner function
#![test_runner(crate::test_runner)] 
// Change the name of the generated function (for running tests)
// to something different than main
#![reexport_test_harness_main = "test_main"]

use core::{panic::PanicInfo, fmt::Write};

mod vga_buffer;

use vga_buffer::WRITER;

#[panic_handler]
/// This function is called on panic.
fn panic(info: &PanicInfo) -> ! {
    // Print the panic info
    println!("{}", info);
    loop {}
}

// This function is useless for non-test runs, so only include 
// it for tests.
#[cfg(test)]
/// This function runs tests.
fn test_runner(tests: &[&dyn Fn()]) {
    println!("Running {} tests", tests.len());
    for test in tests {
        test();
    }
    exit_qemu(QemuExitCode::Success);
}

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
// Represented as u32, since the port size is four bytes
#[repr(u32)]
pub enum QemuExitCode {
    Success = 0x10,
    Failed = 0x11,
}

pub fn exit_qemu(exit_code: QemuExitCode) {
    use x86_64::instructions::port::Port;

    unsafe {
        // Create io port with the port number 0xf4 since we have
        // a device (isa-debug-exit) on that port in QEMU
        let mut port = Port::new(0xf4);
        port.write(exit_code as u32);
    }
}

// Disable name mangling to ensure that Rust really
// outputs a function with the name _start, without
// the attribute the compiler would generate some 
// random name.
#[no_mangle]
// Mark as `extern "C"` to tell the compiler that 
// it should use the C calling convention for this
// function
pub extern "C" fn _start() -> ! {
    // This function is the entry point, since the
    // linker looks for a function named `_start` 
    // by default.

    WRITER.lock().write_str("Hello World\n").unwrap();
    writeln!(WRITER.lock(), "Wow addition, 6.332 + 9.321 = {}", 6.332 + 9.321).unwrap();

    println!("Hello from our modified println macro!");

    #[cfg(test)]
    // (This function is generated by the test framework (it 
    // calls the test_runner), normally the test framework 
    // generates a function called main)
    test_main();

    loop {}
}

#[test_case]
fn trivial_assertion() {
    print!("trivial assertion... ");
    assert_eq!(1, 1);
    println!("[OK]")
}